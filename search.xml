<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux常见命令</title>
    <url>/2020/10/24/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux常见命令"><a href="#Linux常见命令" class="headerlink" title="Linux常见命令"></a>Linux常见命令</h1><h2 id="一-文件与目录"><a href="#一-文件与目录" class="headerlink" title="一.文件与目录"></a>一.文件与目录</h2><ul>
<li><strong>ls</strong>（英文：list files）: 列出目录及文件名</li>
<li><strong>cd</strong>（英文：change directory）：切换目录</li>
<li><strong>pwd</strong>（英文：print work directory）：显示目前的目录</li>
<li><strong>mkdir</strong>（英文：make directory）：创建一个新的目录</li>
<li><strong>rmdir</strong>（英文：remove directory）：删除一个空的目录</li>
<li><strong>cp</strong>（英文：copy file）: 复制文件或目录</li>
<li><strong>rm</strong>（英文：remove）: 移除文件或目录</li>
<li><strong>mv</strong>（英文：move file）: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<h3 id="ls-列出目录及文件名"><a href="#ls-列出目录及文件名" class="headerlink" title="ls 列出目录及文件名"></a>ls 列出目录及文件名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ ls [目录]</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-a    列出全部的文件，包含隐藏文件( 开头为 . 的文件) (常用)</li>
<li>-d    仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-r    列出包含文件的属性与权限等等数据(常用)</li>
</ul>
<h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ cd [相对或绝对目录]</span><br></pre></td></tr></table></figure>
<h3 id="pwd-显示当前所在的目录"><a href="#pwd-显示当前所在的目录" class="headerlink" title="pwd 显示当前所在的目录"></a>pwd 显示当前所在的目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ pwd [-P]</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-P    显示出确实的路径，而非连结 (link) 路径</li>
</ul>
<h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir 创建新目录"></a>mkdir 创建新目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-m    配置文件的权限</li>
<li>-p    直接将所需要的目录(包含上一级目录)递归创建起来</li>
</ul>
<h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir 删除空的目录"></a>rmdir 删除空的目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ rmdir [-p] 目录</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-p    连同上一级<strong>空目录</strong>也一起删除</li>
</ul>
<h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ cp source destination</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-a    相当于 -pdr </li>
<li>-d    若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身</li>
<li>-f    若目标文件已经存在且无法开启，则移除后再尝试一次</li>
<li>-i    若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li>-l    进行硬式连结(hard link)的连结档创建，而非复制文件本身</li>
<li>-p    连同文件的属性一起复制，而非使用默认属性(备份文件时常用)</li>
<li>-r    递归持续复制，用于目录的复制行为(常用)</li>
<li>-s    复制成为符号连结档 (symbolic link)，亦即<strong>捷径文件</strong></li>
<li>-u    若 destination 比 source 旧才升级 destination </li>
</ul>
<h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm 移除文件或目录"></a>rm 移除文件或目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-f    忽略不存在的文件，不会出现警告信息</li>
<li>-i    删除前会询问是否执行</li>
<li>-r    递归删除，常用于删除目录。<strong>这是非常危险的选项！！！</strong></li>
</ul>
<h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv 移动文件与目录，或修改名称"></a>mv 移动文件与目录，或修改名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@wzw:~$ mv [-fiu] source destination</span><br><span class="line">user@wzw:~$ mv [-fiu] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-f     如果目标文件已经存在，不会询问而直接覆盖</li>
<li>-i     若目标文件 (destination) 已存在，询问是否覆盖</li>
<li>-u    若目标文件已存在，且source较新，才会升级 (update)</li>
</ul>
<h2 id="二-查看文件内容"><a href="#二-查看文件内容" class="headerlink" title="二.查看文件内容"></a>二.查看文件内容</h2><ul>
<li><strong>cat</strong> 由第一行开始显示文件内容</li>
<li><strong>tac</strong> 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li><strong>nl</strong>  显示的时候，顺道输出行号！</li>
<li><strong>more</strong> 一页一页的显示文件内容</li>
<li><strong>less</strong> 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li><strong>head</strong> 只看头几行</li>
<li><strong>tail</strong> 只看尾巴几行</li>
</ul>
<h3 id="cat-从第一行开始显示文件内容"><a href="#cat-从第一行开始显示文件内容" class="headerlink" title="cat 从第一行开始显示文件内容"></a>cat 从第一行开始显示文件内容</h3><p>参数：</p>
<ul>
<li>-A     相当于 -vET</li>
<li>-b     列出行号，仅针对非空白行做行号显示，空白行不标行号</li>
<li>-E     结尾的断行字节用 $ 显示</li>
<li>-n     列印出行号，连同空白行也会有行号</li>
<li>-T     [tab] 键以 ^I 显示</li>
<li>-v     列出一些看不出来的特殊字符</li>
</ul>
<h3 id="tac-从最后一行行开始显示文件内容"><a href="#tac-从最后一行行开始显示文件内容" class="headerlink" title="tac 从最后一行行开始显示文件内容"></a>tac 从最后一行行开始显示文件内容</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写。</p>
<h3 id="nl-显示行号"><a href="#nl-显示行号" class="headerlink" title="nl 显示行号"></a>nl 显示行号</h3><ul>
<li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)</li>
<li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0<br>-n rz ：行号在自己栏位的最右方显示，且加 0</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<h3 id="more-一页一页翻动"><a href="#more-一页一页翻动" class="headerlink" title="more 一页一页翻动"></a>more 一页一页翻动</h3><p>打开文件后，可以按：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter     ：代表向下翻『一行』；</li>
<li>/字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f      ：立刻显示出档名以及目前显示的行数；</li>
<li>q       ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，只对文件有用。</li>
</ul>
<h3 id="less-一页一页翻动"><a href="#less-一页一页翻动" class="headerlink" title="less 一页一页翻动"></a>less 一页一页翻动</h3><p>打开文件后，可以按：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串   ：向下搜寻『字串』的功能；</li>
<li>?字串   ：向上搜寻『字串』的功能；</li>
<li>n     ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N     ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q     ：离开 less 这个程序；</li>
</ul>
<h3 id="head-显示文件前面几行"><a href="#head-显示文件前面几行" class="headerlink" title="head 显示文件前面几行"></a>head 显示文件前面几行</h3><p>参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行</li>
</ul>
<h3 id="tail-显示文件后面几行"><a href="#tail-显示文件后面几行" class="headerlink" title="tail 显示文件后面几行"></a>tail 显示文件后面几行</h3><p>参数</p>
<ul>
<li>-n ：后面接数字，代表显示几行</li>
<li>-f ：持续侦测后面所接的档名，按下[ctrl]-c才会结束侦测</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Xamarin的基本控件及常见用法</title>
    <url>/2020/12/04/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Xamarin的基本控件及常见用法"><a href="#Xamarin的基本控件及常见用法" class="headerlink" title="Xamarin的基本控件及常见用法"></a>Xamarin的基本控件及常见用法</h1><p>由于Xaml文件和HTML文件有点像，无法直接上传，只能截图了</p>
<h2 id="一一介绍"><a href="#一一介绍" class="headerlink" title="一一介绍"></a>一一介绍</h2><h3 id="一些通用的属性"><a href="#一些通用的属性" class="headerlink" title="一些通用的属性"></a>一些通用的属性</h3><h4 id="Margin-边距"><a href="#Margin-边距" class="headerlink" title="Margin 边距"></a>Margin 边距</h4><p>简而言之，就是设置控件距左上右下的边距，<strong>注意，不是HTML里的上右下左！</strong></p>
<h4 id="VerticalTextAlignment-amp-HorizontalTextAlignment-垂直-水平居中"><a href="#VerticalTextAlignment-amp-HorizontalTextAlignment-垂直-水平居中" class="headerlink" title="VerticalTextAlignment &amp; HorizontalTextAlignment 垂直/水平居中"></a>VerticalTextAlignment &amp; HorizontalTextAlignment 垂直/水平居中</h4><p>意思很明显，就是定义控件的文本的对齐方式，有<code>Center</code>,<code>Strat</code>,<code>End</code>三个选项，分别对应：<code>居中</code>、<code>左对齐</code>、<code>右对齐</code>。</p>
<h4 id="FontSize-字体大小"><a href="#FontSize-字体大小" class="headerlink" title="FontSize 字体大小"></a>FontSize 字体大小</h4><p>不多说，设置文本字体的大小</p>
<h4 id="以Label控件为例"><a href="#以Label控件为例" class="headerlink" title="以Label控件为例"></a>以Label控件为例</h4><p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8101.png" alt="代码01"></p>
<p>表示一个上下左右边距均为8，垂直/水平居中，字体24号，显示文本”<code>Apple</code>“，名称为”<code>AppleLabel</code>“的Label控件。</p>
<img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C01.png" alt="运行结果" style="zoom: 50%;" />

<h3 id="Label-文本框"><a href="#Label-文本框" class="headerlink" title="Label 文本框"></a>Label 文本框</h3><p>最简单的控件，用于显示文本，常见属性有：</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8102.png" alt="代码02"></p>
<img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C02.png" alt="运行结果02" style="zoom:50%;" />

<h3 id="Button-按钮"><a href="#Button-按钮" class="headerlink" title="Button 按钮"></a>Button 按钮</h3><p>按钮，按了就可以除非指定事件，比如：</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8103.png" alt="代码03"></p>
<p>配合如下代码：</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8104.png" alt="代码04"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainPage</span> : <span class="title">ContentPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MyPopupButton_Clicked</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            AppleLabel.Text = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C03.png" alt="运行结果03" style="zoom:50%;" />

<h3 id="Grid-表"><a href="#Grid-表" class="headerlink" title="Grid 表"></a>Grid 表</h3><p>一般用于排版，可以把其他控件放入其中，常见用法：</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8105.png" alt="代码05"></p>
<p>这个示例创建了一个3行2列的表，示例在本文末尾</p>
<h3 id="ScrollView-滚动视图"><a href="#ScrollView-滚动视图" class="headerlink" title="ScrollView 滚动视图"></a>ScrollView 滚动视图</h3><p>顾名思义，就是鼠标滚轮可以控制的可滚动视图</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8106.png" alt="代码06"></p>
<p>最好要定义它的高度</p>
<h3 id="用Label实现的超链接"><a href="#用Label实现的超链接" class="headerlink" title="用Label实现的超链接"></a>用Label实现的超链接</h3><p>通过附加属性使Label可点击，并添加下划线</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8107.png" alt="代码07"></p>
<p>配合C#代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Essentials;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainPage</span> : <span class="title">ContentPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//注意要异步打开</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ClickMeHyperlinkButton_Tapped</span>(<span class="params"><span class="built_in">object</span> sender, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                         EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> Browser.OpenAsync(<span class="string">&quot;https://www.bilibili.com&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Switch-开关"><a href="#Switch-开关" class="headerlink" title="Switch 开关"></a>Switch 开关</h3><p>没什么好说的</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8108.png" alt="代码08"></p>
<h3 id="Entry-输入框"><a href="#Entry-输入框" class="headerlink" title="Entry 输入框"></a>Entry 输入框</h3><p>同样没什么可说的</p>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8109.png" alt="代码09"></p>
<h2 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h2><p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E4%BB%A3%E7%A0%8110.png" alt="代码10"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Essentials;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainPage</span> : <span class="title">ContentPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MyPopupButton_Clicked</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DisplayAlert(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;这是一个简单的弹窗&quot;</span>, <span class="string">&quot;确定&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ClickMeHyperlinkButton_Tapped</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> Browser.OpenAsync(<span class="string">&quot;https://www.bilibili.com&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tc.skyone.host/blog/post/Xamarin%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/%E7%A4%BA%E4%BE%8B.png" alt="示例"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的神经网络框架</title>
    <url>/2020/11/14/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>这是一个基于python的最简单的神经网络框架，使用了<code>numpy</code>库，使用的是输入层 - 隐藏层 - 输出层的结构，每一层的节点数自可定义。原理图：</p>
<p><img src="https://tc.skyone.host/blog/post/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" alt="原理图"></p>
<p>激活函数是经典的：</p>
<p><img src="https://tc-1.oss-cn-hangzhou.aliyuncs.com/blog/post/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png" alt="激活函数"></p>
<p>误差函数的斜率：</p>
<p><img src="https://tc-1.oss-cn-hangzhou.aliyuncs.com/blog/post/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/%E8%AF%AF%E5%B7%AE%E5%87%BD%E6%95%B0.png" alt="误差函数"></p>
<p>使用矩阵简化运算：</p>
<p><img src="https://tc-1.oss-cn-hangzhou.aliyuncs.com/blog/post/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97.png" alt="矩阵运算"></p>
<p>代码很短、很简单，但效果却还不错。</p>
<p>输入层、隐藏层、输出层节点数分别784、100、10个，经过<code>MNIST手写数字数据集</code>的训练后，跑了10000个测试，手写数字识别准确率达到了95%左右。</p>
<p><img src="https://tc.skyone.host/blog/post/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/%E8%AF%86%E5%88%AB%E5%87%86%E7%A1%AE%E7%8E%87.png" alt="识别准确率"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + numpy.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputnodes, hiddennodes, outputnodes, learningrate=<span class="number">0.3</span></span>):</span></span><br><span class="line">        <span class="comment"># set number of nodes in each input, hidden, output layer</span></span><br><span class="line">        <span class="comment"># 分别是：输入层、隐藏层、输出层的节点数</span></span><br><span class="line">        self.inodes = inputnodes</span><br><span class="line">        self.hnodes = hiddennodes</span><br><span class="line">        self.onodes = outputnodes</span><br><span class="line"></span><br><span class="line">        <span class="comment"># learning rate</span></span><br><span class="line">        <span class="comment"># 学习速率</span></span><br><span class="line">        self.lr = learningrate</span><br><span class="line"></span><br><span class="line">        <span class="comment"># weights</span></span><br><span class="line">        <span class="comment"># 使用正态分布初始化权重</span></span><br><span class="line">        self.wih = numpy.random.normal(<span class="number">0.0</span>, <span class="built_in">pow</span>(self.inodes, -<span class="number">0.5</span>), (self.hnodes, self.inodes))</span><br><span class="line">        self.who = numpy.random.normal(<span class="number">0.0</span>, <span class="built_in">pow</span>(self.hnodes, -<span class="number">0.5</span>), (self.onodes, self.hnodes))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self, inputs_list</span>):</span></span><br><span class="line">        <span class="comment"># 计算每个数字的概率</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 翻转矩阵</span></span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=<span class="number">2</span>).T</span><br><span class="line">		<span class="comment"># 输入进隐藏层的数据与权重相乘</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        <span class="comment"># 激活函数</span></span><br><span class="line">        hidden_outputs = activate(hidden_inputs)</span><br><span class="line">		<span class="comment"># 输入进输出层的数据与权重相乘</span></span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        <span class="comment"># 激活函数</span></span><br><span class="line">        final_outputs = activate(final_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final_outputs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self, inputs_list, targets_list</span>):</span></span><br><span class="line">        <span class="comment"># 误差计算函数</span></span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=<span class="number">2</span>).T</span><br><span class="line">        targets = numpy.array(targets_list, ndmin=<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        hidden_outputs = activate(hidden_inputs)</span><br><span class="line"></span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        final_outputs = activate(final_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># errors</span></span><br><span class="line">        <span class="comment"># 误差值</span></span><br><span class="line">        output_errors = targets - final_outputs</span><br><span class="line">        hidden_errors = numpy.dot(self.who.T, output_errors)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update the weights for the links between the hidden and output layer</span></span><br><span class="line">        <span class="comment"># 根据误差调整权重</span></span><br><span class="line">        self.who += self.lr * numpy.dot((output_errors * final_outputs * (<span class="number">1.0</span> - final_outputs)), numpy.transpose(hidden_outputs))</span><br><span class="line">        <span class="comment"># update the weights for the links between the hidden and output layer</span></span><br><span class="line">        <span class="comment"># 根据误差调整权重</span></span><br><span class="line">        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (<span class="number">1.0</span> - hidden_outputs)), numpy.transpose(inputs))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>课程表爬虫-未完待续</title>
    <url>/2020/10/29/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</url>
    <content><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol>
<li><strong>总体思路</strong></li>
<li><strong>网站分析</strong><ol>
<li><strong>登录web系统</strong></li>
<li><strong>登录教务系统</strong></li>
<li><strong>获取课表</strong></li>
</ol>
</li>
<li><strong>开始写代码</strong></li>
</ol>
<h2 id="1-总体思路"><a href="#1-总体思路" class="headerlink" title="1.总体思路"></a>1.总体思路</h2><p>由于查合工大课表需要连接校园网，要实现随时随地爬取课表需要借助学校提供的web***系统。</p>
<p>因此这个爬虫需要两次模拟登录。</p>
<p>第一次是登录<a href="https://webvpn.hfut.edu.cn/login">web***</a></p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/web1.png" alt="web1"></p>
<p>第二次是通过web***打开教务系统学生端</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/web2.png" alt="web2"></p>
<h2 id="2-网站分析"><a href="#2-网站分析" class="headerlink" title="2.网站分析"></a>2.网站分析</h2><h3 id="登录web系统"><a href="#登录web系统" class="headerlink" title="登录web系统"></a>登录web系统</h3><p>首先用浏览器抓包</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/s1.png" alt="s1"></p>
<p>do-login是一个post请求，data段很简单，用户名和密码都没有加密，但在此之前需要先获取一个captcha_id，直接请求就行了</p>
<p>后面的info是一个get请求，很明显用于获取信息，禁止JavaScript再打开网页，果然，这个网页是JavaScript动态加载的，info就是用于获取信息，还是不放心？再翻一翻JavaScript，很容易就找到了这个</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/s2.png" alt="s2"></p>
<p>这下没错了，由于教务系统网址每次都不一样，我们想要通过web***打开它只能通过发送一个叫</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info?_&#x3D;xxxxxxxx</span><br></pre></td></tr></table></figure>
<p> 的get请求获取网址，等于号后面一眼就能看出来是<strong>时间戳</strong></p>
<h3 id="登录教务系统"><a href="#登录教务系统" class="headerlink" title="登录教务系统"></a>登录教务系统</h3><p>由于web***系统暂时抽风，先连校园网测试</p>
<p>依然先抓包</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/j1.png" alt="j1"></p>
<p>这就有点意思了，先get了一个login-salt，再post登录用的login，而且login的数据段的密码加密了！</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/j2.png" alt="j2"></p>
<p>只能调试JavaScript了。。。</p>
<p>经过一番寻找，终于在</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/j3.png" alt="j3"></p>
<p>找到了加密方式：先get一个”盐“，连到密码前面，再用SHA1算法加密</p>
<p>其实也不算复复杂，毕竟python自带所有hash算法(在hashlib)里，就算没有，也可以把Google的sha1.js复制过来用python调用</p>
<h3 id="获取课表"><a href="#获取课表" class="headerlink" title="获取课表"></a>获取课表</h3><p>抓包抓包~~~</p>
<p>发现两个特别的请求：</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/get1.png" alt="get1"></p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/get2.png" alt="get"></p>
<p>第一个用于获取加载网页的js，第二个是json信息</p>
<p>我们只需要那个json信息，直接分析并打开网址即可</p>
<p>打开网页，抓包</p>
<p><img src="https://tc.skyone.host/blog/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%88%AC%E8%99%AB-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/get3.png" alt="get3"></p>
<p>很简单，看来上面那个网页不用请求，直接获取这个get-data即可，参数就是时间</p>
<p>至此，分析完成</p>
<h2 id="3-开始写代码"><a href="#3-开始写代码" class="headerlink" title="3.开始写代码"></a>3.开始写代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">normal_headers = &#123;</span><br><span class="line">    <span class="string">r&quot;User-Agent&quot;</span>: <span class="string">r&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                   <span class="string">r&quot;Chrome/86.0.4240.111 Safari/537.36 Edg/86.0.622.56 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">VPN1_headers = &#123;</span><br><span class="line">    <span class="string">r&quot;Accept&quot;</span>: <span class="string">r&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="string">r&quot;Accept-Encoding&quot;</span>: <span class="string">r&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Content-Type&quot;</span>: <span class="string">r&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;User-Agent&quot;</span>: <span class="string">r&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                   <span class="string">r&quot;Chrome/86.0.4240.111 Safari/537.36 Edg/86.0.622.56 &quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Cookie&quot;</span>: <span class="string">r&quot;show_vpn=1; wengine_vpn_ticketwebvpn_hfut_edu_cn=783a9268eeff4127; remember_token=&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Host&quot;</span>: <span class="string">r&quot;webvpn.hfut.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Origin&quot;</span>: <span class="string">r&quot;https://webvpn.hfut.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Referer&quot;</span>: <span class="string">r&quot;https://webvpn.hfut.edu.cn/login&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">r&quot;empty&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">r&quot;cors&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Site&quot;</span>: <span class="string">r&quot;same-origin&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;X-Requested-With&quot;</span>: <span class="string">r&quot;XMLHttpRequest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">VPN2_headers = &#123;</span><br><span class="line">    <span class="string">r&quot;Accept&quot;</span>: <span class="string">r&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,&quot;</span></span><br><span class="line">               <span class="string">r&quot;application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Accept-Encoding&quot;</span>: <span class="string">r&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;User-Agent&quot;</span>: <span class="string">r&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                   <span class="string">r&quot;Chrome/86.0.4240.111 Safari/537.36 Edg/86.0.622.56 &quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Cookie&quot;</span>: <span class="string">r&quot;show_vpn=1; wengine_vpn_ticketwebvpn_hfut_edu_cn=783a9268eeff4127; remember_token=&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Host&quot;</span>: <span class="string">r&quot;webvpn.hfut.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Referer&quot;</span>: <span class="string">r&quot;https://webvpn.hfut.edu.cn/login&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">r&quot;document&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">r&quot;navigate&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Site&quot;</span>: <span class="string">r&quot;same-origin&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-User&quot;</span>: <span class="string">r&quot;?1&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">VPN3_headers = &#123;</span><br><span class="line">    <span class="string">r&quot;Accept&quot;</span>: <span class="string">r&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="string">r&quot;Accept-Encoding&quot;</span>: <span class="string">r&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;User-Agent&quot;</span>: <span class="string">r&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                   <span class="string">r&quot;Chrome/86.0.4240.111 Safari/537.36 Edg/86.0.622.56 &quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Cookie&quot;</span>: <span class="string">r&quot;show_vpn=1; wengine_vpn_ticketwebvpn_hfut_edu_cn=783a9268eeff4127; remember_token=&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Host&quot;</span>: <span class="string">r&quot;webvpn.hfut.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Referer&quot;</span>: <span class="string">r&quot;https://webvpn.hfut.edu.cn/&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">r&quot;empty&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">r&quot;cors&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;Sec-Fetch-Site&quot;</span>: <span class="string">r&quot;same-origin&quot;</span>,</span><br><span class="line">    <span class="string">r&quot;X-Requested-With&quot;</span>: <span class="string">r&quot;XMLHttpRequest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">VPN_url = <span class="string">r&#x27;https://webvpn.hfut.edu.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha_id</span>(<span class="params">page</span>):</span></span><br><span class="line">    xpath = <span class="string">r&#x27;//*[@id=&quot;captcha-wrap&quot;]/div/div/input/@value&#x27;</span></span><br><span class="line">    page.encoding = page.apparent_encoding</span><br><span class="line">    selector = html.fromstring(page.text)</span><br><span class="line">    <span class="keyword">return</span> selector.xpath(xpath)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VPN_session = requests.Session()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">r&#x27;auth_type&#x27;</span>: <span class="string">r&#x27;local&#x27;</span>,</span><br><span class="line">    <span class="string">r&#x27;username&#x27;</span>: <span class="string">r&#x27;填用户名&#x27;</span>,</span><br><span class="line">    <span class="string">r&#x27;sms_code&#x27;</span>: <span class="string">r&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">r&#x27;password&#x27;</span>: <span class="string">r&#x27;填密码&#x27;</span>,</span><br><span class="line">    <span class="string">r&#x27;captcha&#x27;</span>: <span class="string">r&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">r&#x27;needCaptcha&#x27;</span>: <span class="string">r&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">r&#x27;captcha_id&#x27;</span>: get_captcha_id(VPN_session.get(<span class="string">r&#x27;https://webvpn.hfut.edu.cn/login&#x27;</span>, headers=normal_headers))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res0 = VPN_session.post(VPN_url + <span class="string">r&#x27;do-login&#x27;</span>, headers=VPN1_headers, data=data)</span><br><span class="line">res1 = VPN_session.get(VPN_url, headers=VPN2_headers)</span><br><span class="line">res2 = VPN_session.get(VPN_url + <span class="string">r&#x27;user/info?_=&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)), headers=VPN3_headers)</span><br><span class="line">print(res1)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="目前测试未成功，未完待续"><a href="#目前测试未成功，未完待续" class="headerlink" title="目前测试未成功，未完待续"></a>目前测试未成功，未完待续</h3>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>制作一个获取网易云音乐下载链接的服务器</title>
    <url>/2020/12/20/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ul>
<li>Koa基础</li>
</ul>
<p>推荐一篇<a href="http://www.ruanyifeng.com/blog/2017/08/koa.html?bsh_bid=1983230339">博客</a>，把koa讲的非常易懂，几乎看懂他提供的例子后koa就会得差不多了，如果有时间，我可能也会写一篇教程。</p>
<ul>
<li>JavaScript基础</li>
<li>HTML基础</li>
</ul>
<h4 id="用到的Node-js模块"><a href="#用到的Node-js模块" class="headerlink" title="用到的Node.js模块"></a>用到的Node.js模块</h4><ul>
<li>koa</li>
<li>koa-route</li>
<li>axios</li>
<li>crypto-js</li>
</ul>
<p>如果你用的WebStorm，直接写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">&#x27;koa-route&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br></pre></td></tr></table></figure>
<p>即可，WebStorm会自动提示你安装。</p>
<p>其实自己安装也很简单，先切换到工作目录，用cmd或shell运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa</span><br><span class="line">npm install koa-route</span><br><span class="line">npm install axios</span><br><span class="line">npm isntall crypto-js</span><br></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="1-抓包、定位加密代码"><a href="#1-抓包、定位加密代码" class="headerlink" title="1. 抓包、定位加密代码"></a>1. 抓包、定位加密代码</h2><p>首先打开网易云音乐网页版，进入任意一首歌，打开浏览器的DevTools，选择Network，点击播放，稍加分析，不难看出，这个<code>post</code>请求是用来获取音乐链接。</p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%8A%93%E5%8C%85.png" alt="抓包"></p>
<p>切换到调用栈(Initiator)，看看发送它的函数在哪</p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%B0%83%E7%94%A8%E6%A0%88.png" alt="调用栈"></p>
<p>打开，发现是一大坨看不懂的代码</p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E4%B8%80%E5%A4%A7%E5%9D%A8%E4%B8%8D%E6%83%B3%E7%9C%8B%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt="一大坨不想看的代码"></p>
<p>看来这样走不通，那就搜搜post请求的data吧，<code>Ctrl</code>+<code>F</code>，搜<code>encSecKey</code></p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%AF%B7%E6%B1%82%E5%A4%B4.png" alt="请求头"></p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AE%9A%E4%BD%8D%E5%8A%A0%E5%AF%86%E4%BB%A3%E7%A0%81.png" alt="定位加密代码"></p>
<p>嗯，完美，很显然，这里的两个参数来自第13297行(可能你看到的行数和我不一样)的<code>window.asrsea()</code>函数</p>
<p>先刷新一下，再在那一行打个断点，点击播放</p>
<p>断点触发，进入<code>window.asrsea()</code>函数</p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9B%E5%85%A5%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0.png" alt="进入加密函数"></p>
<p>再在那个<code>d(d,e,f,g)</code>函数的第一行打个断点，可以看到这就是我们要找的加密函数。</p>
<h2 id="2-分析加密代码"><a href="#2-分析加密代码" class="headerlink" title="2. 分析加密代码"></a>2. 分析加密代码</h2><p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%8A%A0%E5%AF%86%E4%BB%A3%E7%A0%81.png" alt="加密代码"></p>
<p>在左边的局部变量中看出，<code>d</code>保存的是一个字符串化的json，保存着要获取的歌曲id</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: [</span><br><span class="line">        <span class="number">32102297</span></span><br><span class="line">    ],</span><br><span class="line">    level: &quot;standard&quot;,</span><br><span class="line">    encodeType: &quot;aac&quot;,</span><br><span class="line">    csrf_token: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过多次测试，<code>e</code>是一个定值：<code>&quot;010001&quot;</code>，来自<code>[&quot;流泪&quot;, &quot;强&quot;]</code>两个表情转换为对应的代码，转换映射如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;色&quot;</span>: <span class="string">&quot;00e0b&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;流感&quot;</span>: <span class="string">&quot;509f6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;这边&quot;</span>: <span class="string">&quot;259df&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;弱&quot;</span>: <span class="string">&quot;8642d&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;嘴唇&quot;</span>: <span class="string">&quot;bc356&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;亲&quot;</span>: <span class="string">&quot;62901&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;开心&quot;</span>: <span class="string">&quot;477df&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;呲牙&quot;</span>: <span class="string">&quot;22677&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;憨笑&quot;</span>: <span class="string">&quot;ec152&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;猫&quot;</span>: <span class="string">&quot;b5ff6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;皱眉&quot;</span>: <span class="string">&quot;8ace6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;幽灵&quot;</span>: <span class="string">&quot;15bb7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;蛋糕&quot;</span>: <span class="string">&quot;b7251&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;发怒&quot;</span>: <span class="string">&quot;52b3a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;大哭&quot;</span>: <span class="string">&quot;b17a8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;兔子&quot;</span>: <span class="string">&quot;76aea&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;星星&quot;</span>: <span class="string">&quot;8a5aa&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;钟情&quot;</span>: <span class="string">&quot;76d2e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;牵手&quot;</span>: <span class="string">&quot;41762&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;公鸡&quot;</span>: <span class="string">&quot;9ec4e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;爱意&quot;</span>: <span class="string">&quot;e341f&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;禁止&quot;</span>: <span class="string">&quot;56135&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;狗&quot;</span>: <span class="string">&quot;fccf6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;亲亲&quot;</span>: <span class="string">&quot;95280&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;叉&quot;</span>: <span class="string">&quot;104e0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;礼物&quot;</span>: <span class="string">&quot;312ec&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;晕&quot;</span>: <span class="string">&quot;bda92&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;呆&quot;</span>: <span class="string">&quot;557c9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;生病&quot;</span>: <span class="string">&quot;38701&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;钻石&quot;</span>: <span class="string">&quot;14af6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;拜&quot;</span>: <span class="string">&quot;c9d05&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;怒&quot;</span>: <span class="string">&quot;c4f7f&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;示爱&quot;</span>: <span class="string">&quot;0c368&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;汗&quot;</span>: <span class="string">&quot;5b7a4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;小鸡&quot;</span>: <span class="string">&quot;6bee2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;痛苦&quot;</span>: <span class="string">&quot;55932&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;撇嘴&quot;</span>: <span class="string">&quot;575cc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;惶恐&quot;</span>: <span class="string">&quot;e10b4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;口罩&quot;</span>: <span class="string">&quot;24d81&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;吐舌&quot;</span>: <span class="string">&quot;3cfe4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;心碎&quot;</span>: <span class="string">&quot;875d3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;生气&quot;</span>: <span class="string">&quot;e8204&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;可爱&quot;</span>: <span class="string">&quot;7b97d&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;鬼脸&quot;</span>: <span class="string">&quot;def52&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;跳舞&quot;</span>: <span class="string">&quot;741d5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;男孩&quot;</span>: <span class="string">&quot;46b8e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;奸笑&quot;</span>: <span class="string">&quot;289dc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;猪&quot;</span>: <span class="string">&quot;6935b&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;圈&quot;</span>: <span class="string">&quot;3ece0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;便便&quot;</span>: <span class="string">&quot;462db&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;外星&quot;</span>: <span class="string">&quot;0a22b&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;圣诞&quot;</span>: <span class="string">&quot;8e7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;流泪&quot;</span>: <span class="string">&quot;01000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;强&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;爱心&quot;</span>: <span class="string">&quot;0CoJU&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;女孩&quot;</span>: <span class="string">&quot;m6Qyw&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;惊恐&quot;</span>: <span class="string">&quot;8W8ju&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;大笑&quot;</span>: <span class="string">&quot;d&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>f</code>同样是定值，来自一下表情转换为代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;色&quot;</span>, <span class="string">&quot;流感&quot;</span>, <span class="string">&quot;这边&quot;</span>, <span class="string">&quot;弱&quot;</span>, <span class="string">&quot;嘴唇&quot;</span>, <span class="string">&quot;亲&quot;</span>, <span class="string">&quot;开心&quot;</span>, <span class="string">&quot;呲牙&quot;</span>, <span class="string">&quot;憨笑&quot;</span>, <span class="string">&quot;猫&quot;</span>, <span class="string">&quot;皱眉&quot;</span>, <span class="string">&quot;幽灵&quot;</span>, <span class="string">&quot;蛋糕&quot;</span>, <span class="string">&quot;发怒&quot;</span>, <span class="string">&quot;大哭&quot;</span>, <span class="string">&quot;兔子&quot;</span>, <span class="string">&quot;星星&quot;</span>, <span class="string">&quot;钟情&quot;</span>, <span class="string">&quot;牵手&quot;</span>, <span class="string">&quot;公鸡&quot;</span>, <span class="string">&quot;爱意&quot;</span>, <span class="string">&quot;禁止&quot;</span>, <span class="string">&quot;狗&quot;</span>, <span class="string">&quot;亲亲&quot;</span>, <span class="string">&quot;叉&quot;</span>, <span class="string">&quot;礼物&quot;</span>, <span class="string">&quot;晕&quot;</span>, <span class="string">&quot;呆&quot;</span>, <span class="string">&quot;生病&quot;</span>, <span class="string">&quot;钻石&quot;</span>, <span class="string">&quot;拜&quot;</span>, <span class="string">&quot;怒&quot;</span>, <span class="string">&quot;示爱&quot;</span>, <span class="string">&quot;汗&quot;</span>, <span class="string">&quot;小鸡&quot;</span>, <span class="string">&quot;痛苦&quot;</span>, <span class="string">&quot;撇嘴&quot;</span>, <span class="string">&quot;惶恐&quot;</span>, <span class="string">&quot;口罩&quot;</span>, <span class="string">&quot;吐舌&quot;</span>, <span class="string">&quot;心碎&quot;</span>, <span class="string">&quot;生气&quot;</span>, <span class="string">&quot;可爱&quot;</span>, <span class="string">&quot;鬼脸&quot;</span>, <span class="string">&quot;跳舞&quot;</span>, <span class="string">&quot;男孩&quot;</span>, <span class="string">&quot;奸笑&quot;</span>, <span class="string">&quot;猪&quot;</span>, <span class="string">&quot;圈&quot;</span>, <span class="string">&quot;便便&quot;</span>, <span class="string">&quot;外星&quot;</span>, <span class="string">&quot;圣诞&quot;</span>]</span><br></pre></td></tr></table></figure>
<p><code>g</code>同上，是<code>[&quot;爱心&quot;, &quot;女孩&quot;, &quot;惊恐&quot;, &quot;大笑&quot;]</code>转换为代码</p>
<p>所以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br></pre></td></tr></table></figure>
<p>嗯，常量搞清楚了，再看看加密方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d, e, b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (d = <span class="number">0</span>; a &gt; d; d += <span class="number">1</span>)</span><br><span class="line">            e = <span class="built_in">Math</span>.random() * b.length,</span><br><span class="line">                e = <span class="built_in">Math</span>.floor(e),</span><br><span class="line">                c += b.charAt(e);</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = CryptoJS.enc.Utf8.parse(b)</span><br><span class="line">            , d = CryptoJS.enc.Utf8.parse(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">            , e = CryptoJS.enc.Utf8.parse(a)</span><br><span class="line">            , f = CryptoJS.AES.encrypt(e, c, &#123;</span><br><span class="line">                iv: d,</span><br><span class="line">                mode: CryptoJS.mode.CBC</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">return</span> f.toString()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d, e;</span><br><span class="line">        <span class="keyword">return</span> setMaxDigits(<span class="number">131</span>),</span><br><span class="line">            d = <span class="keyword">new</span> RSAKeyPair(b, <span class="string">&quot;&quot;</span>, c),</span><br><span class="line">            e = encryptedString(d, a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">d, e, f, g</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">            , i = a(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> h.encText = b(d, g),</span><br><span class="line">            h.encText = b(h.encText, i),</span><br><span class="line">            h.encSecKey = c(i, e, f),</span><br><span class="line">            h</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">a, b, d, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> f = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> f.encText = c(a + e, b, d),</span><br><span class="line">            f</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.asrsea = d,</span><br><span class="line">        <span class="built_in">window</span>.ecnonasr = e</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p><code>enText</code>就是post请求里的<code>params</code>参数，来自b函数加密两次</p>
<p><code>encSecKey</code>来自c函数加密一次</p>
<h3 id="a函数"><a href="#a函数" class="headerlink" title="a函数"></a>a函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d, e, b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (d = <span class="number">0</span>; a &gt; d; d += <span class="number">1</span>)</span><br><span class="line">        e = <span class="built_in">Math</span>.random() * b.length,</span><br><span class="line">            e = <span class="built_in">Math</span>.floor(e),</span><br><span class="line">            c += b.charAt(e);</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，用来生成指定长度的随机字符串</p>
<h3 id="b函数"><a href="#b函数" class="headerlink" title="b函数"></a>b函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = CryptoJS.enc.Utf8.parse(b)</span><br><span class="line">        , d = CryptoJS.enc.Utf8.parse(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">        , e = CryptoJS.enc.Utf8.parse(a)</span><br><span class="line">        , f = CryptoJS.AES.encrypt(e, c, &#123;</span><br><span class="line">            iv: d,</span><br><span class="line">            mode: CryptoJS.mode.CBC</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> f.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只使用了CryptoJS的函数，由于我们也用JavaScript写代码，直接复制即可，管他干嘛的-_-，只要在开头加个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>即可。</p>
<h3 id="c函数"><a href="#c函数" class="headerlink" title="c函数"></a>c函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d, e;</span><br><span class="line">    <span class="keyword">return</span> setMaxDigits(<span class="number">131</span>),</span><br><span class="line">        d = <span class="keyword">new</span> RSAKeyPair(b, <span class="string">&quot;&quot;</span>, c),</span><br><span class="line">        e = encryptedString(d, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看着很短，实际上调用了自定义的类，这样就不能用对付b函数的方法了，这里我们先不去看c函数干了什么</p>
<p>我们看看它的参数</p>
<table>
<thead>
<tr>
<th>c函数的参数</th>
<th>d函数里对应的变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>i</td>
<td>长度位16的随机字符串</td>
</tr>
<tr>
<td>b</td>
<td>e</td>
<td>“010001”</td>
</tr>
<tr>
<td>c</td>
<td>f</td>
<td>“00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7”</td>
</tr>
</tbody></table>
<p>站在网易的角度想想，向网易传了一串加密后的字符串，这个字符串经过一个随机数和三个常量的加密，要想解密，必然需要那个随机数，而<code>encSecKey</code>显然是用来提供那个随机数的，<code>encSecKey</code>只来自c函数且c函数接受一个随机数和两个常量，可以解密出那个随机数，因此：</p>
<p><strong>如果那个a函数得到的随机数如果我们用定值代替，嘿嘿嘿，c函数得出的</strong><code>encSecKey</code><strong>也将是定值！</strong></p>
<p>我们同调试函数即可获取一个随机数和与之对应的加密后的<code>encSecKey</code></p>
<p>我获得的是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">i = <span class="string">&quot;bEjJE2aqLOyTEZiv&quot;</span></span><br><span class="line">encSecKey = <span class="string">&quot;3e7ad1dbe03a65fc32268930314b88bcbfc1e9782c3b398c30b62776e39b66a048a7122d282a13d99f9b63bd4e1940b136169fbedf56c1887933fa59a01f95c4c0e78a6d9bb7f91605408e9c1c3c2e57873c53cdf09a3d79a43cfe26260741097089e4bd19808aab395190274e687b807ffddee89f39d75f2288e28a582f3d08&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><p>经过上面的分析，我们可以得出如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> c = CryptoJS.enc.Utf8.parse(b)</span><br><span class="line">        , d = CryptoJS.enc.Utf8.parse(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">        , e = CryptoJS.enc.Utf8.parse(a)</span><br><span class="line">        , f = CryptoJS.AES.encrypt(e, c, &#123;</span><br><span class="line">        iv: d,</span><br><span class="line">        mode: CryptoJS.mode.CBC</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> f.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maker</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">      , i = <span class="string">&quot;bEjJE2aqLOyTEZiv&quot;</span>;</span><br><span class="line">    h.encText = b(d, <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span>);</span><br><span class="line">    h.encText = b(h.encText, i);</span><br><span class="line">    h.encSecKey = <span class="string">&quot;3e7ad1dbe03a65fc32268930314b88bcbfc1e9782c3b398c30b62776e39b66a048a7122d282a13d99f9b63bd4e1940b136169fbedf56c1887933fa59a01f95c4c0e78a6d9bb7f91605408e9c1c3c2e57873c53cdf09a3d79a43cfe26260741097089e4bd19808aab395190274e687b807ffddee89f39d75f2288e28a582f3d08&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> [h.encText, h.encSecKey];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是很简单？</p>
<h2 id="3-实现后端"><a href="#3-实现后端" class="headerlink" title="3. 实现后端"></a>3. 实现后端</h2><p>这部分没什么可讲的，要讲的话也只是将web，因此，跳过。。</p>
<p>完整代码如下：</p>
<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">&#x27;koa-route&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> c = CryptoJS.enc.Utf8.parse(b)</span><br><span class="line">        , d = CryptoJS.enc.Utf8.parse(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">        , e = CryptoJS.enc.Utf8.parse(a)</span><br><span class="line">        , f = CryptoJS.AES.encrypt(e, c, &#123;</span><br><span class="line">        iv: d,</span><br><span class="line">        mode: CryptoJS.mode.CBC</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> f.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maker</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">      , i = <span class="string">&quot;bEjJE2aqLOyTEZiv&quot;</span>;</span><br><span class="line">    h.encText = b(d, <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span>);</span><br><span class="line">    h.encText = b(h.encText, i);</span><br><span class="line">    h.encSecKey = <span class="string">&quot;3e7ad1dbe03a65fc32268930314b88bcbfc1e9782c3b398c30b62776e39b66a048a7122d282a13d99f9b63bd4e1940b136169fbedf56c1887933fa59a01f95c4c0e78a6d9bb7f91605408e9c1c3c2e57873c53cdf09a3d79a43cfe26260741097089e4bd19808aab395190274e687b807ffddee89f39d75f2288e28a582f3d08&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> [h.encText, h.encSecKey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.response.type = <span class="string">&quot;html&quot;</span>;</span><br><span class="line">    ctx.response.body = fs.createReadStream(<span class="string">&quot;./index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">async</span> (id) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> answer = &#123;<span class="attr">status</span>: <span class="number">500</span>, <span class="attr">body</span>: &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">let</span> params = maker(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        ids: [id],</span><br><span class="line">        level: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">        encodeType: <span class="string">&quot;aac&quot;</span>,</span><br><span class="line">        csrf_token: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">const</span> settings = &#123;</span><br><span class="line">        method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        url: <span class="string">&quot;https://music.163.com/weapi/song/enhance/player/url/v1?csrf_token=&quot;</span>,</span><br><span class="line">        data: querystring.stringify(&#123;</span><br><span class="line">            params: params[<span class="number">0</span>],</span><br><span class="line">            encSecKey: params[<span class="number">1</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">await</span> axios(settings)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            answer.body = res.data;</span><br><span class="line">            answer.status = <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            answer.body = err;</span><br><span class="line">            answer.status = <span class="literal">false</span>;</span><br><span class="line">        &#125;));</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> analyze = <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&lt;p&gt;服务器出错！请联系管理员&lt;/p&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">await</span> request(ctx.request.query.id)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data;</span><br><span class="line">            <span class="keyword">if</span> (res.status) &#123;</span><br><span class="line">                data = res.body;</span><br><span class="line">                <span class="keyword">if</span> (data.code === <span class="number">200</span>) &#123;</span><br><span class="line">                    result = <span class="string">&#x27;&lt;p&gt;歌曲id为:&#x27;</span> + data.data[<span class="number">0</span>].id + <span class="string">&#x27;&lt;/p&gt;&lt;p&gt;点击&lt;a href=&quot;&#x27;</span> + data.data[<span class="number">0</span>].url + <span class="string">&#x27;&quot;&gt;链接&lt;/a&gt;下载&lt;/p&gt;&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = <span class="string">&#x27;&lt;p&gt;输入错误！&lt;/p&gt;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            result = <span class="string">&#x27;&lt;p&gt;输入错误！&lt;/p&gt;&lt;br /&gt;&#x27;</span> + <span class="built_in">JSON</span>.stringify(err);</span><br><span class="line">        &#125;)</span><br><span class="line">    ctx.response.body = result;</span><br><span class="line">    ctx.response.type = <span class="string">&quot;html&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">app.use(route.get(<span class="string">&quot;/&quot;</span>, page))</span><br><span class="line">app.use(route.get(<span class="string">&quot;/url&quot;</span>, analyze))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="4-实现前端"><a href="#4-实现前端" class="headerlink" title="4. 实现前端"></a>4. 实现前端</h2><p>额，前端我真的不太会，随便写一个吧，能用就行</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网易云音乐链接分析器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    输入歌曲id:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getWyyyy()&quot;</span>&gt;</span>获取下载链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getWyyyy</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;id&quot;</span>).value</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.href = <span class="string">&quot;http://localhost:3000/url?id=&quot;</span> + input</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>记得完成后把<code>localhost</code>换成自己的IP或域名哦(如果像远程使用的话)</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>运行命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>打开浏览器，输入网址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:3000&#x2F;</span><br></pre></td></tr></table></figure>
<p>如果一切正常，你将看到你写的前端界面</p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%B5%8B%E8%AF%9501.png" alt="测试01"></p>
<p>输入歌曲id，点击按钮</p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%B5%8B%E8%AF%9502.png" alt="测试02"></p>
<p><img src="https://tc.skyone.host/blog/post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%B5%8B%E8%AF%9503.png" alt="测试03"></p>
<p>弹出下载界面，成功！</p>
]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>JavaScript</tag>
        <tag>Koa</tag>
      </tags>
  </entry>
</search>
